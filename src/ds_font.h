/*  Copyright 2021-2022 MarcosHCK
 *  This file is part of deusexmakina2.
 *
 *  deusexmakina2 is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  deusexmakina2 is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with deusexmakina2.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
#ifndef __DS_FONT_INCLUDED__
#define __DS_FONT_INCLUDED__ 1
#include <ds_folder_provider.h>
#include <ds_export.h>
#include <gio/gio.h>

/**
 * DS_FONT_ERROR:
 *
 * Error domain for DS_FONT. Errors in this domain will be from the #DsFontError enumeration.
 * See #GError for more information on error domains.
 */
#define DS_FONT_ERROR (ds_font_error_quark())

/**
 * DsFontError:
 * @DS_FONT_ERROR_FAILED: generic error condition.
 * @DS_FONT_ERROR_INVALID_CACHE: used internally to implement charmap caching.
 * @DS_FONT_ERROR_FREETYPE: error generated by FreeType library (used to load fonts and generate a bitmap font).
 * @DS_FONT_ERROR_LIBWEBP: error generated by libwebp library (used to cache generated bitmap font).
 * @DS_FONT_ERROR_LIBICU: error generated by libicu library (used to get a localized alphabet).
 * @DS_FONT_ERROR_SDLL error generated by SDL2 library (used to calculate screen dpi).
 * @DS_FONT_ERROR_UNKNOWN_GLYPH: unknown glyph encounter while rendering an string.
 *
 * Error code returned by DsFont API.
 * Note that %DS_FONT_ERROR_FAILED is here only for compatibility with
 * error domain definition paradigm as defined on GLib documentation.
 */
typedef enum {
  DS_FONT_ERROR_FAILED,
  DS_FONT_ERROR_INVALID_CACHE,
  DS_FONT_ERROR_FREETYPE,
  DS_FONT_ERROR_LIBWEBP,
  DS_FONT_ERROR_LIBICU,
  DS_FONT_ERROR_SDL,
  DS_FONT_ERROR_UNKNOWN_GLYPH,
} DsFontError;

#define DS_TYPE_FONT            (ds_font_get_type())
#define DS_FONT(object)         (G_TYPE_CHECK_INSTANCE_CAST((object), DS_TYPE_FONT, DsFont))
#define DS_FONT_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST((klass), DS_TYPE_FONT, DsFontClass))
#define DS_IS_FONT(object)      (G_TYPE_CHECK_INSTANCE_TYPE((object), DS_TYPE_FONT))
#define DS_IS_FONT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), DS_TYPE_FONT))
#define DS_FONT_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), DS_TYPE_FONT, DsFontClass))

typedef struct _DsFont      DsFont;
typedef struct _DsFontClass DsFontClass;

#if __cplusplus
extern "C" {
#endif // __cplusplus

DEUSEXMAKINA2_API
GQuark
ds_font_error_quark();
DEUSEXMAKINA2_API
GType
ds_font_get_type();

DEUSEXMAKINA2_API
DsFont*
ds_font_new(GFile            *font_file,
            gint              font_size,
            DsCacheProvider  *cache_provider,
            GCancellable     *cancellable,
            GError          **error);

/* Internal API */
G_GNUC_INTERNAL
gboolean
_ds_libi18n_get_charset(gchar         **pcharset,
                        GCancellable   *cancellable,
                        GError        **error);

#if __cplusplus
}
#endif // __cplusplus

#endif // __DS_FONT_INCLUDED__
